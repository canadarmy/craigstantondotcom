"""
Django settings for craigstantondotcom project.

Generated by 'django-admin startproject' using Django 1.11.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import socket
from google.cloud import storage

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'homepage',
    'blockchain',
    'generalblog',
    'static',
    'rest_framework',
    'markdown'
]

APPEND_SLASH = True

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'craigstantondotcom.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'craigstantondotcom.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

if socket.gethostname() != "Chizzler":
    client = storage.Client()
    bucket = client.get_bucket('craigstantondotcom-backend')

    basedb_pwd_location = bucket.get_blob('craigstantondotcom-basedb-password.txt')
    BASEDB_PWD = basedb_pwd_location.download_as_string().strip()

    secret_key_location = bucket.get_blob('csdotcom_key.txt')
    SECRET_KEY = secret_key_location.download_as_string().strip()

    #with open(r'https://storage.googleapis.com/craigstantondotcom-backend/craigstantondotcom-basedb-password.txt') as f:
        #BASEDB_PWD = f.read().strip()
    #with open(r'https://storage.googleapis.com/craigstantondotcom-backend/csdotcom_key.txt') as f:
        #SECRET_KEY = f.read().strip()
else:
    with open(r'C:\Users\Craig\csdotcom_dbpw.txt') as f:
        SECRET_DBPW = f.read().strip()
    with open(r'C:\Users\Craig\csdotcom_key.txt') as f:
        SECRET_KEY = f.read().strip()


# [START db_setup]
if socket.gethostname() != "Chizzler":
    # Running on production App Engine, so connect to Google Cloud SQL using
    # the unix socket at /cloudsql/<your-cloudsql-connection string>
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'HOST': '/cloudsql/craigstantondotcom:europe-west1:craigstanton-basedb',
            'NAME': 'craigstanton-basedb',
            'USER': 'postgres',
            'PASSWORD': BASEDB_PWD,
        }
    }
else:
    # Running locally so connect to either a local MySQL instance or connect to
    # Cloud SQL via the proxy. To start the proxy via command line:
    #
    #     $ cloud_sql_proxy -instances=[INSTANCE_CONNECTION_NAME]=tcp:3306
    #
    # See https://cloud.google.com/sql/docs/mysql-connect-proxy
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'craigstantondotcom',
            'USER': 'Craig',
            'PASSWORD': SECRET_DBPW,
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }
# [END db_setup]


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

if socket.gethostname() != "Chizzler":
    STATIC_URL = os.environ['STATIC_URL']
else:
    STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'craigstantondotcom-static')
